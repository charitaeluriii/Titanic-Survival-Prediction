
"""Titanic.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m-4BRZdJs1jVkZ6WnfOsYAn0peNyukhj
"""

import os
import pandas as pd

current_directory = os.getcwd()
print(f"Current working directory: {current_directory}")


files_in_directory = os.listdir(current_directory)
print(f"Files in the directory: {files_in_directory}")

if 'train.csv' in files_in_directory:

    train_data = pd.read_csv('train.csv')
else:

    print("File 'train.csv' not found in current directory. Provide the full path or move the file.")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Load the training data
train_data = pd.read_csv('train.csv')

# Preprocess the data
train_data['Age'].fillna(train_data['Age'].median(), inplace=True)
train_data['Embarked'].fillna(train_data['Embarked'].mode()[0], inplace=True)
train_data = train_data.drop(['Cabin', 'Name', 'Ticket', 'PassengerId'], axis=1)
train_data = pd.get_dummies(train_data, columns=['Sex', 'Embarked'])

# Define features (X) and target (y)
X = train_data.drop('Survived', axis=1)
y = train_data['Survived']

# Split the data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train a RandomForestClassifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Make predictions on the validation set
y_pred = model.predict(X_val)

# Evaluate the model
accuracy = accuracy_score(y_val, y_pred)
print(f"Validation Accuracy: {accuracy}")

# Load the test data
test_data = pd.read_csv('test.csv')
passenger_ids = test_data['PassengerId']

# Preprocess the test data (similar to training data)
test_data['Age'].fillna(test_data['Age'].median(), inplace=True)
test_data['Fare'].fillna(test_data['Fare'].median(), inplace=True)
test_data['Embarked'].fillna(test_data['Embarked'].mode()[0], inplace=True)
test_data = test_data.drop(['Cabin', 'Name', 'Ticket', 'PassengerId'], axis=1)
test_data = pd.get_dummies(test_data, columns=['Sex', 'Embarked'])

# Ensure the test data has the same columns as the training data
missing_cols = set(X_train.columns) - set(test_data.columns)
for c in missing_cols:
  test_data[c] = 0
test_data = test_data[X_train.columns]


# Make predictions on the test data
test_predictions = model.predict(test_data)


# Create a submission DataFrame
submission_df = pd.DataFrame({'PassengerId': passenger_ids, 'Survived': test_predictions})

# Save the submission to a CSV file
submission_df.to_csv('titanic_submission.csv', index=False)

# Evaluate the model
accuracy = accuracy_score(y_val, y_pred)
print(f"Validation Accuracy: {accuracy}")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the training data (assuming it's already preprocessed as in your code)
try:
    train_data = pd.read_csv('train.csv')
    train_data['Age'].fillna(train_data['Age'].median(), inplace=True)
    train_data['Embarked'].fillna(train_data['Embarked'].mode()[0], inplace=True)
    train_data = train_data.drop(['Cabin', 'Name', 'Ticket', 'PassengerId'], axis=1)
    train_data = pd.get_dummies(train_data, columns=['Sex', 'Embarked'])
except FileNotFoundError:
    print("Error: 'train.csv' not found. Please make sure the file is in the current directory.")
    exit()  # Exit the script if the file is not found

# Visualizations

# 1. Survival rate by passenger class
plt.figure(figsize=(8, 6))
sns.countplot(x='Pclass', hue='Survived', data=train_data)
plt.title('Survival Rate by Passenger Class')
plt.show()

# 2. Survival rate by sex
plt.figure(figsize=(8, 6))
sns.countplot(x='Sex_female', hue='Survived', data=train_data)
plt.title('Survival Rate by Sex')
plt.show()

# 3. Survival rate by age
plt.figure(figsize=(10, 6))
sns.histplot(x='Age', hue='Survived', data=train_data, kde=True, element="step")
plt.title('Survival Rate by Age')
plt.show()

# 4. Survival rate by fare
plt.figure(figsize=(10, 6))
sns.histplot(x='Fare', hue='Survived', data=train_data, kde=True, element="step")
plt.title('Survival Rate by Fare')
plt.show()

# 5. Heatmap of correlations
plt.figure(figsize=(12, 10))
sns.heatmap(train_data.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Add more visualizations as needed based on your data and analysis goals